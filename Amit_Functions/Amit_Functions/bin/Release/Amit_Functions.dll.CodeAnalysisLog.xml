<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 11.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="11.0">
 <Targets>
  <Target Name="G:\IMS\Amit_Functions\Amit_Functions\bin\Release\Amit_Functions.dll">
   <Modules>
    <Module Name="amit_functions.dll">
     <Namespaces>
      <Namespace Name="AMIT_FUNCTIONS">
       <Types>
        <Type Name="impfunc" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CHECK_IS_NOTHING(System.Windows.Forms.ComboBox)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="530">'impfunc.CHECK_IS_NOTHING(ComboBox)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CHECK_IS_NOTHING(System.Windows.Forms.ComboBox,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="556">'impfunc.CHECK_IS_NOTHING(ComboBox, bool)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CHECK_SPECIAL_CHR(System.Windows.Forms.Form,System.Windows.Forms.KeyPressEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="881">'impfunc.CHECK_SPECIAL_CHR(Form, KeyPressEventArgs)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DELETE_FROM_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13985">'impfunc.DELETE_FROM_JOURNAL(SqlConnection, SqlTransaction, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13982">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.DELETE_FROM_JOURNAL(SqlConnection, SqlTransaction, string)' could contain the following variables 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DELETE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10440">'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10432">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string)' could contain the following variables 'TableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10436">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string)' could contain the following variables 'TableName', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DELETE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10392">'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10381">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string, int)' could contain the following variables 'TableName', 'Col'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DELETE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10416">'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10405">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.DELETE_RECORDS(SqlConnection, string, SqlTransaction, string, string)' could contain the following variables 'TableName', 'Col'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXISTS_RECORD(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="974">'impfunc.EXISTS_RECORD(SqlConnection, SqlTransaction, string, string, string, bool)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="955">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.EXISTS_RECORD(SqlConnection, SqlTransaction, string, string, string, bool)' could contain the following variables 'FieldName', 'TableName', 'Condition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EXISTS_RECORD(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="898">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'impfunc.EXISTS_RECORD(SqlConnection, string, string, string, bool)' could contain the following variables 'FieldName', 'TableName', 'Condition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GENERATE_MAX(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="591">'impfunc.GENERATE_MAX(SqlConnection, SqlTransaction, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="588">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GENERATE_MAX(SqlConnection, SqlTransaction, string, string)' could contain the following variables 'Field', 'Table'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GENERATE_MAX(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="617">'impfunc.GENERATE_MAX(SqlConnection, SqlTransaction, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="606">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GENERATE_MAX(SqlConnection, SqlTransaction, string, string, string)' could contain the following variables 'Field', 'Table', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GENERATE_MAX(System.Data.SqlClient.SqlConnection,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="572">'impfunc.GENERATE_MAX(SqlConnection, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="568">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'impfunc.GENERATE_MAX(SqlConnection, string, string)' could contain the following variables 'Field', 'Table'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GENERATE_MAX(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="641">'impfunc.GENERATE_MAX(SqlConnection, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="629">The query string passed to 'SqlCommand.SqlCommand(string, SqlConnection)' in 'impfunc.GENERATE_MAX(SqlConnection, string, string, string)' could contain the following variables 'Field', 'Table', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET_ID_AFTER_SAVE(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8425">'impfunc.GET_ID_AFTER_SAVE(SqlConnection, string, SqlTransaction)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8422">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GET_ID_AFTER_SAVE(SqlConnection, string, SqlTransaction)' could contain the following variables 'TableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET_ONEFIELD(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8492">'impfunc.GET_ONEFIELD(SqlConnection, SqlTransaction, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8489">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GET_ONEFIELD(SqlConnection, SqlTransaction, string, string)' could contain the following variables 'FieldName', 'TableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET_ONEFIELD(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8519">'impfunc.GET_ONEFIELD(SqlConnection, SqlTransaction, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8508">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GET_ONEFIELD(SqlConnection, SqlTransaction, string, string, string)' could contain the following variables 'FieldName', 'TableName', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET_ONEFIELD(System.Data.SqlClient.SqlConnection,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8444">'impfunc.GET_ONEFIELD(SqlConnection, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8440">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GET_ONEFIELD(SqlConnection, string, string)' could contain the following variables 'FieldName', 'TableName'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET_ONEFIELD(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8472">'impfunc.GET_ONEFIELD(SqlConnection, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8460">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.GET_ONEFIELD(SqlConnection, string, string, string)' could contain the following variables 'FieldName', 'TableName', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GETSERVERNAME()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="337">'impfunc.GETSERVERNAME()' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#NEXTTAB(System.Windows.Forms.Form,System.Windows.Forms.KeyEventArgs)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="866">'impfunc.NEXTTAB(Form, KeyEventArgs)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13701">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, int, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13800">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, int, int, string, string, string, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13768">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, string, int, int, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13734">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, string, int, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13868">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, string, int, int, string, string, string, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13969">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, string, int, int, string, string, string, int, int, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13833">'impfunc.SAVE_IN_JOURNAL(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, string, int, int, string, string, string, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL_WITHOUT_TTYPE(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13901">'impfunc.SAVE_IN_JOURNAL_WITHOUT_TTYPE(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, int, int, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_IN_JOURNAL_WITHOUT_TTYPE(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="13934">'impfunc.SAVE_IN_JOURNAL_WITHOUT_TTYPE(SqlConnection, SqlTransaction, int, int, int, string, int, string, string, string, string, int, int, string, string, string, int, int, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6148">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6136">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string)' could contain the following variables 'TableName', 'Col1'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6176">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6161">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6207">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6189">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6241">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6220">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6278">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6254">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6318">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6291">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6361">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6331">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6407">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6374">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6456">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6420">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6508">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6469">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6563">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6521">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6621">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6576">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6682">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6634">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6746">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6695">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6813">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6759">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6883">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6826">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6956">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6896">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7032">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="6969">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7111">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7045">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7193">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7124">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7278">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7206">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7366">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7291">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7457">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7379">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7551">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7470">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7648">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7564">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7748">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7661">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7851">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7761">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7957">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7864">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27', 'Col28'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8065">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="7970">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27', 'Col28', 'Col29'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8176">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8078">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27', 'Col28', 'Col29', 'Col30'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8290">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8189">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27', 'Col28', 'Col29', 'Col30', 'Col31'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SAVE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8408">'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8303">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.SAVE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'Col21', 'Col22', 'Col23', 'Col24', 'Col25', 'Col26', 'Col27', 'Col28', 'Col29', 'Col30', 'Col31', 'Col32'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SET_CONNECTIONSTRING(System.Data.SqlClient.SqlConnection,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="240">'impfunc.SET_CONNECTIONSTRING(SqlConnection, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SET_CONNECTIONSTRING(System.Data.SqlClient.SqlConnection,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="288">'impfunc.SET_CONNECTIONSTRING(SqlConnection, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SET_CONNECTIONSTRING(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="218">'impfunc.SET_CONNECTIONSTRING(string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SET_CONNECTIONSTRING(System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="264">'impfunc.SET_CONNECTIONSTRING(string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10368">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10365">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string)' could contain the following variables 'TableName', 'SqlStringWithCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8573">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8561">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string)' could contain the following variables 'TableName', 'Col1', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8548">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8534">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8633">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8617">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8604">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8586">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8699">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8680">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8667">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8646">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8771">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8749">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8736">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8712">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8849">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8824">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8811">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8784">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8933">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8905">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8892">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8862">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9023">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8992">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8979">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="8946">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9119">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9085">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9072">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9036">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9221">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9184">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9171">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9132">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9329">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9289">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9276">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9234">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9443">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9400">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9387">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9342">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9563">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9517">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9504">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9456">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9689">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9640">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9627">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9576">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9819">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9768">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9755">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9702">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9957">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9902">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'SqlCondition'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9889">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9832">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10030">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="9970">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10106">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10043">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10185">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10119">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10267">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10198">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UPDATE_RECORDS(System.Data.SqlClient.SqlConnection,System.String,System.Data.SqlClient.SqlTransaction,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10351">'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Issue>
            </Message>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-08-27 10:25:06Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="g:\IMS\Amit_Functions\Amit_Functions" File="impfunc.cs" Line="10280">The query string passed to 'SqlCommand.CommandText.set(string)' in 'impfunc.UPDATE_RECORDS(SqlConnection, string, SqlTransaction, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, int)' could contain the following variables 'TableName', 'Col1', 'Col2', 'Col3', 'Col4', 'Col5', 'Col6', 'Col7', 'Col8', 'Col9', 'Col10', 'Col11', 'Col12', 'Col13', 'Col14', 'Col15', 'Col16', 'Col17', 'Col18', 'Col19', 'Col20', 'CondField'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="RethrowToPreserveStackDetails" Category="Microsoft.Usage" CheckId="CA2200">
   <Name>Rethrow to preserve stack details</Name>
   <Description>Use the IL rethrow instruction to preserve original stack details when re-raising a caught exception.</Description>
   <Resolution Name="Default">{0} rethrows a caught exception and specifies it explicitly as an argument. Use 'throw' without an argument instead, in order to preserve the stack location where the exception was initially raised.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182363(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="11.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="11.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
